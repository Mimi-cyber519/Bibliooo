// <auto-generated />
using System;
using Bibliooo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bibliooo.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250424202245_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Bibliooo.Models.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Bibliooo.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Authorid")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Authorid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bibliooo.Models.Genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Bibliooo.Models.Loan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Bookid")
                        .HasColumnType("int");

                    b.Property<int?>("Memberid")
                        .HasColumnType("int");

                    b.Property<int>("date")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Bookid");

                    b.HasIndex("Memberid");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Bibliooo.Models.Member", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone_num")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Bibliooo.Models.Publisher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("booksid")
                        .HasColumnType("int");

                    b.Property<int>("genresid")
                        .HasColumnType("int");

                    b.HasKey("booksid", "genresid");

                    b.HasIndex("genresid");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<int>("booksid")
                        .HasColumnType("int");

                    b.Property<int>("publishersid")
                        .HasColumnType("int");

                    b.HasKey("booksid", "publishersid");

                    b.HasIndex("publishersid");

                    b.ToTable("BookPublisher");
                });

            modelBuilder.Entity("Bibliooo.Models.Book", b =>
                {
                    b.HasOne("Bibliooo.Models.Author", null)
                        .WithMany("books_id")
                        .HasForeignKey("Authorid");
                });

            modelBuilder.Entity("Bibliooo.Models.Loan", b =>
                {
                    b.HasOne("Bibliooo.Models.Book", null)
                        .WithMany("loans")
                        .HasForeignKey("Bookid");

                    b.HasOne("Bibliooo.Models.Member", null)
                        .WithMany("loans")
                        .HasForeignKey("Memberid");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("Bibliooo.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliooo.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("genresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("Bibliooo.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliooo.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("publishersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bibliooo.Models.Author", b =>
                {
                    b.Navigation("books_id");
                });

            modelBuilder.Entity("Bibliooo.Models.Book", b =>
                {
                    b.Navigation("loans");
                });

            modelBuilder.Entity("Bibliooo.Models.Member", b =>
                {
                    b.Navigation("loans");
                });
#pragma warning restore 612, 618
        }
    }
}
